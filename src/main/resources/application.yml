server:
  port: 8888 # 定义自己项目启动端口
  servlet:
    context-path: /tog
  undertow:
    threads:
      io: 16 # 设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接, 默认设置每个CPU核心一个线程
      worker: 128 # 阻塞任务线程池, 当执行类似servlet请求阻塞操作, undertow会从这个线程池中取得线程,它的值设置取决于系统的负载,默认值是 io-threads*8,但是按照官方参数肯定不够，要优化一下
    max-http-post-size: 0
    # 以下的配置会影响buffer,这些buffer会用于服务器连接的IO操作,有点类似netty的池化内存管理
    # 每块buffer的空间大小,越小的空间被利用越充分，不要设置太大，以免影响其他应用，合适即可
    buffer-size: 1024
    direct-buffers: true
  shutdown: graceful # 优雅的关闭undertow
  compression:
    enabled: true
  http2:
    enabled: true
spring:
  application:
    name: ${APP_NAME:TogBoot}
  profiles:
    active: test
  # 数据源配置项
  datasource:
    url: ${DB_URL:jdbc:jdbc:mysql://127.0.0.1:3306/tog?useUnicode=true&characterEncoding=UTF-8&useSSL=false&nullCatalogMeansCurrent=false}
    driver-class-name: com.mysql.cj.jdbc.Driver
    username: ${DB_USER:tog}
    password: ${DB_PWD:Tog@6666}
    druid: # Druid 【监控】相关的全局配置
      web-stat-filter:
        enabled: true
      stat-view-servlet:
        enabled: true
        allow: # 设置白名单，不填则允许所有访问
        url-pattern: /druid/*
        login-username: tog # 控制台管理用户名和密码
        login-password: Tog@6666
      filter:
        stat:
          enabled: true
          log-slow-sql: true # 慢 SQL 记录
          slow-sql-millis: 1000
          merge-sql: true # 合并sql
        wall:
          config:
            multi-statement-allow: true
        # 配置日志输出
        slf4j:
          enabled: true
          connection-close-after-log-enabled: false
          statement-close-after-log-enabled: false
          result-set-open-after-log-enabled: false
          result-set-close-after-log-enabled: false
# spring actuator配置
management:
  endpoints:
    web:
      exposure:
        include: info, health, beans, env, metrics # Actuator默认把所有访问点暴露给JMX，但处于安全原因，只有health和info会暴露给Web。
# 日志等级
logging:
  level:
    root: info